import uuid
import csv
from datetime import datetime
from typing import Union
from fastapi import APIRouter, HTTPException, BackgroundTasks,Depends
from sqlalchemy.orm import Session
from .database import SessionLocal
from .models import StoreStatus, StoreHours, StoreTimezones, ReportStatus
import io

router = APIRouter()

# Helper function to generate report data
def generate_report_data(db: Session) -> str:
    store_statuses = db.query(StoreStatus).all()
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(['store_id', 'timestamp_utc', 'status', 'day_of_week', 'start_time_local', 'end_time_local', 'timezone_str'])
    
    for status in store_statuses:
        store_id = status.store_id
        store_hours = db.query(StoreHours).filter(StoreHours.store_id == store_id).first()
        if not store_hours:
            store_hours = {
                'day_of_week': 'All days',
                'start_time_local': '00:00:00',
                'end_time_local': '23:59:59'
            }
        else:
            store_hours = {
                'day_of_week': store_hours.day_of_week,
                'start_time_local': store_hours.start_time_local.strftime('%H:%M:%S'),
                'end_time_local': store_hours.end_time_local.strftime('%H:%M:%S')
            }
        
        timezone = db.query(StoreTimezones).filter(StoreTimezones.store_id == store_id).first()
        timezone_str = timezone.timezone_str if timezone else 'America/Chicago'

        writer.writerow([store_id, status.timestamp_utc, status.status, store_hours['day_of_week'], 
                         store_hours['start_time_local'], store_hours['end_time_local'], timezone_str])
    
    output.seek(0)
    return output.getvalue()

@router.post("/trigger_report")
def trigger_report(background_tasks: BackgroundTasks, db: Session = Depends(SessionLocal)):
    report_id = str(uuid.uuid4())
    # Insert new report record with status "Running"
    report = ReportStatus(report_id=report_id, status="Running", created_at=datetime.utcnow(), updated_at=datetime.utcnow())
    db.add(report)
    db.commit()
    
    # Define background task function
    def generate_report_task():
        report_data = generate_report_data(db)
        report = db.query(ReportStatus).filter(ReportStatus.report_id == report_id).first()
        report.status = "Complete"
        # Save CSV data if needed, otherwise just update status
        db.commit()

    # Add background task
    background_tasks.add_task(generate_report_task)
    
    return {"report_id": report_id}

@router.get("/get_report")
def get_report(report_id: str, db: Session = Depends(SessionLocal)):
    report = db.query(ReportStatus).filter(ReportStatus.report_id == report_id).first()
    if not report:
        raise HTTPException(status_code=404, detail="Report not found")
    
    if report.status == "Running":
        return {"status": "Running"}
    
    if report.status == "Complete":
        # Return CSV file
        csv_data = generate_report_data(db)
        return {"status": "Complete", "csv_data": csv_data}
    
    raise HTTPException(status_code=400, detail="Invalid report status")

